package com.casestudy.customer.signUpLogin.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.casestudy.customer.signUpLogin.models.UserDetails;
import com.casestudy.customer.signUpLogin.repository.UserRespository;
import com.casestudy.customer.signUpLogin.services.SequenceGeneratorService;
import com.mongodb.MongoWriteException;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/user")
public class UserController {

	@Autowired
    private  UserRespository  repository;
	
	@Autowired
	private SequenceGeneratorService service;

	
	@PostMapping("/adduser")
	public String saveUserDetails(@RequestBody UserDetails user) throws DuplicateKeyException
	{
		try {
		user.setId(service.getSequenceNumber(UserDetails.SEQUENCE_NAME));
		repository.save(user);
		
		return "userDetails added successfully with id "+user.getId();
		}
		catch(DuplicateKeyException e)
		{
			return "User Registration Failed-Email Already Exists";
		}
	}
	@GetMapping("/findAllUsers")
	public List<UserDetails> getUserDetails(){
		return repository.findAll();
	}
	
	@GetMapping("/findAllUsers/{id}")
	public Optional<UserDetails> getUser(@PathVariable int id){
		return repository.findById(id);
	}
	
	@GetMapping("/findByEmailId/{emailId}")
	public List<UserDetails> getUserByemail(@PathVariable String emailId)
	{
		return repository.findByEmailId(emailId);
	}
	
	@DeleteMapping("/delete/{id}")
	public String deleteBook(@PathVariable int id)
	{
		repository.deleteById(id);
		return "User deleted with id:"+id;
	}
	
	
	@PutMapping("/update/{id}")
	public String updateById(@PathVariable int id,@RequestBody UserDetails updateduser ) {
		Optional<UserDetails> findwasher=repository.findById(id);
		UserDetails uservalues=findwasher.get();
		uservalues.setUsername(updateduser.getUsername());
		if(uservalues.getEmailId()!=updateduser.getEmailId()) {
			uservalues.setEmailId(updateduser.getEmailId());}
		uservalues.setAddress(updateduser.getAddress());
		uservalues.setPhone(updateduser.getPhone());
		repository.save(uservalues);
		
		return "Details updated successfully";
		
	}
}
